class Solution {
public:
    string shortestPalindrome(string s) {
        //INTUITION OF THIS PROBLEM IS LIKE A STORY
        //WE THOUGHT THE SOLUTION OF TIS PROBBLEM IN THREE WAYS AND EACH WAY GIVES SOME IDEA ABOUT IT AND ALSO HELPS US TO OPTIMISE THE APPROACH MORE
        //FOR ALL APPROACHES READ NOTES
        
        //SO LETS SOLVE IT WITH MOST OPTIMISED APPROACH WHICH IS :- 
        
        //...................CONCEPT OF LONGEST PREFIX PALINDROME (LPP)............................
        
        // LONGEST PREFIX PALINDROME IS A SUBSTRING THAT STARTS FROM 0TH INDEX I.E PREFIX OF STRING AND ALSO IS A PALINDROM
        //SO TO SOLVE THE QUESTION IF ANY HOW WE FIND OUT THE LENGTH OF LONGEST PREFIX PALINDROME IN A STRING THEN ALL THE CHARACTERS WILL BE REPEATED IN STARTING OF THAT STRING TO MAKE THAT PALINDROMIC
        //FOR EXAMPLE:- ROORSP...........HERE THR LENGTH OF LPP IS 4 I.E ROOR WHICH IS A PREFIX AND PALINDROME TOO SO ALL OTHER REMEINING CHRACTERS WHICH ARE S AND P CAN BE PLACED AT FRONT OF THE STRING TO MAKE IT PALINDROME
        // BY PLACING THOSE REMAINING TWO CHARACTERS SUCH AS :- PSROORSP WILL MAKE THIS PALINDROME
        
        //SO THE MINIMUM NO OF CHARACTERS THAT CAN BE ADDED TO MAKE A STRING PALINDROME IS THE NO OF CHARACTER REMAINS AFTER THE LENGTH OF LPP
        //SO THE REMAINING CHRACTER WILL BE ADDED IN THEE FRONT OF THE STRING IN REVERSE ORDER AND WE WILL RETURN THAT
        
        //FOR EXAMPLE:- STRING=ABC HERE THE LPP IS A ONLY WHICH HAVE A LENGTH OF 1
        //SO HERE WE WILL ATTACH BC IN REVERSE  ORDER THAT IS CB INFRONT OF THE STRING WHICH WILL BE;- CBABC AND WE WILL RETURN THIS 
        
        //............NOW THE QUESTION IS HOW TO FIND OUT LENGTH OF LPP IN A STRING??????....................
        //PALINDROME HAVE THE SPECIAL ABILITY THAT IT READS SAME WHEN IT IS NORMAL AND WHEN IT IS REVERSED
        //SO WE WILL USE THIS ABILITY TO FIND OUT LENGTH OF LPP
        
        //WE KNOW THAT LONGEEST PREFIX SUFFIX IS THE SUBSTRING WHICH IS A PREFIX AND A SUFFIX TOO 
        //HERE WE ARE TRYING TO FIND A PALINDROM WHICH IS A PREFIX TOO 
        //SO IF WE WILL REVERSE THE STRING GIVEN THEN IF THERE IS ANY PREFIX PALINROME THAT WILL BE THE SUFFIX PLINDROME OF THE STRING
        //MEANS LET STRING= ROORSP HERE ROOR IS THE PREFIX PALINDROME
        //WHEN WE WILL REVERSE IT:- REVERSED STRING= PSROOR HERE ROOR IS THE SUFFIX PALINDROME
        //AND IN BOTH NORMAL AND REVERSE WAY OF STRING THE PALINDROME READS THE SAME WAY
        
        //SO FROM HERE I DEVELOPED A IDEA THAT IF I REVERSE THE GIVEN STRING AND ATTACH THAT REVERSED STRING WITH ORIGINAL STRING THEN 
        //IF ANY PALINDROME EXIST IN THE STRING THEN THAT WILL ACT AS A PREFIX SUFFIX
        //MEANS IF I DO THIS IN MY EXAMPLE :- ROORSP+PSROOR = ROORSPPSROOR THEN HERE ROOR WILL BE THE PREFIX SUFFIX
        //HENCE HERE JUST BY FINDING THE THE LENGTH OF LONGESST PREFIX SUFFIX OF THE COMBINED STRING I CAN GET THEE LENGTH OF LONGEST PREFIX PALINDROME
        
        //BUT HERE I HAVE TO NOTICE THAT IF I DONOT ADD ANY SEPARATOR WHILE COMBININGG REVERSE STRING TO ORIGINAL STRING THEN IN SOME CASES THAT MIGHT CAUSE PROBLEM
        //FOR EXAMPLE IN STRING:- AAAA IF COMBINE STRINGS WITHOUT ANY SEPARATOR THAT WILL BE:- AAAAAAAA IN WHICH THE LENGTH OF LONGEST PREFIX SUFFIX WILL BE 7 BUT WE KNOW THAT HERE THE LENGTH OF LONGEST PREFIX PALINDROME IS 4
        //SO TO AVOID THESE TYPE OF MISTAKE WE ADD A SEPARATOR WHILLE COMBINING LIKE:- AAAA$AAAA HERE THE LPS WILL BE 4
        //SEPARATOR IS THE SYMBOL THAT CANNOT BE PRESENT IN THE GIVEN STRING PREVIOUSLY AND USED TO SEPARATE ORIGINAL AND REVERSED STRING WHICH CAN BE &,$,ANYRTHING
        
         //edge case
         if(s.size()==0){
             return "";
         }

        //SO LETS REVERSE THE STRING AND COMBINE IT TO FIND OUT THE LENGTH OF LONGEST PREFIX PALINDROME
        // reversing the string in anaother string variable to keep the original string intact
        string rev=s;
        reverse(rev.begin(),rev.end());
        //COMBINING THE STRING WITH SEPARATOR
        string comb_str=s+'$'+rev;

        //CREATING LPS TABLE FOR THE COMBINED STRING TO FIND THE LENGTH OF LONGEST PREFIX SUFFIX WHICH WILL BE SAME AS THE LONGEST PREFIX PALINNDROME
        vector<int>LPS(comb_str.size());
        LPS[0]=0;
        int pref=0,suff=1;

        while(suff<LPS.size()){
            if(comb_str[pref]==comb_str[suff]){
                LPS[suff]=pref+1;
                pref++;
                suff++;
            }
            else{
                if(pref==0){
                    LPS[suff]=0;
                    suff++;
                }
                else{
                    pref=LPS[pref-1];
                }
            }
        }

        //THE LPS TABLE FOR COMBINED STRING IS FILLED NOW
        //NOW THE LAST INDEX OF LPS TABLE WILL HAVE THE LPS OF THE WHOLE COMBINED STRING WHICH WILL BE EQUAL TO THE LONGEST PREFIX PALINDROME LENGHT OF THE ORIGINAL STRING
         int LPP_length=LPS[LPS.size()-1];
         //MOST IMPORTANTLY THIS LENGTH IS ALSO EQUAL TO THE INDEX FROM WHICH CHARACTER OF THE STRING WILL BE PLACED IN FRONT OF THAT STRING TO MAKE THAT PALINDROME
         //FOR EXAMPLE;- IN STRING:- ROORSPD THE LENGTH OF LPP IS 4 
         //AND 4 IS ALSO THE INDEX FROM WHICH CHARACTER OF THE STRING WILL BE PLACED IN FRONT OF THAT STRING TO MAKE THAT PALINDROME I.E S,P AND D..... IN REVERSE ORDER

         //NOW I HAVE GOT THE LENGTH OF LPP SO NOW I HAVE TO ATTACH REMAINING CHARACTER IN REVERSE ORDER INFRONT OF THE ORIGINAL STRING AND RETURN THAT
         //FIRST I WILL PUSH THOSE REMINGING CHARACTER FROM THE BACK OF THE STRING IN REVERSE ORDER INTO A NEW STRING THEN I WILL PUSH THE ORIGINAL STRING

         //INSTED OF CREATING ANOTHER STRING FOR ANSWER I WILL DO THIS  IN THE ALREADY REVERSED STRING I.E REV
         rev=rev+s.substr(LPP_length,s.size());
        //so we have added the remaining characters in reverse order by traversing the string from back upto the index FROM WHICH CHARACTER OF THE STRING WILL BE PLACED IN FRONT OF THAT STRING TO MAKE THAT PALINDROME
         
         return rev;

    }
};